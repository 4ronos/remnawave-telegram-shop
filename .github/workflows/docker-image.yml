name: Build docker image

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  # –û–±—â–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      should_push: ${{ steps.should-push.outputs.should_push }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Should push images
        id: should-push
        run: |
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "should_push=true" >> $GITHUB_OUTPUT
          else
            echo "should_push=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/remnawave-telegram-shop-bot
          tags: |
            # Always include latest tag for tags and main branch
            type=raw,value=latest,enable=${{ github.ref_type == 'tag' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
            # Use semver tags when Git tag is in semver format
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Use the short SHA for all builds
            type=sha,format=short,prefix=
            # Include the tag name if it's a tag-triggered build
            type=ref,event=tag
            # Include branch name for non-main branches
            type=ref,event=branch

      - name: Create build matrix
        id: set-matrix
        run: |
          echo "matrix={\"platform\":[\"linux/amd64\",\"linux/arm64\"]}" >> $GITHUB_OUTPUT

  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
  build-per-arch:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.prepare.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (linux/amd64 -> amd64)
      - name: Extract architecture
        id: extract-arch
        run: |
          ARCH=$(echo ${{ matrix.platform }} | cut -d/ -f2)
          echo "arch=$ARCH" >> $GITHUB_OUTPUT
          echo "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"

      # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (latest -> latest-amd64)
      - name: Create arch-specific tags
        id: meta-arch
        run: |
          ARCH=${{ steps.extract-arch.outputs.arch }}
          TAGS="${{ needs.prepare.outputs.tags }}"
          
          # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
          ARCH_TAGS=""
          while IFS= read -r TAG; do
            if [ -n "$TAG" ]; then
              ARCH_TAG="${TAG}-${ARCH}"
              ARCH_TAGS="${ARCH_TAGS}${ARCH_TAG}\n"
            fi
          done <<< "$TAGS"
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo -e "$ARCH_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and push per architecture
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: ${{ needs.prepare.outputs.should_push }}
          tags: ${{ steps.meta-arch.outputs.tags }}
          labels: ${{ needs.prepare.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            TARGETARCH=${{ steps.extract-arch.outputs.arch }}
          provenance: false
          sbom: false

  # –°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
  create-manifest:
    needs: [prepare, build-per-arch]
    if: needs.prepare.outputs.should_push == 'true'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform manifest
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ needs.prepare.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          provenance: false
          sbom: false

  # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
  send-notification:
    needs: [prepare, create-manifest]
    if: needs.prepare.outputs.should_push == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set commit message
        id: commit-message
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            # For tag events
            TAG_MSG=$(git tag -l --format='%(contents)' ${{ github.ref_name }})
            if [ -z "$TAG_MSG" ]; then
              TAG_MSG="Release ${{ github.ref_name }}"
            fi
          else
            # For workflow_dispatch or other events
            TAG_MSG="${{ github.event.head_commit.message || format('Manual build from {0}', github.ref_name) }}"
          fi
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$TAG_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            üõ†Ô∏è ${{ github.ref_name }}
            üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${{ steps.commit-message.outputs.message }}
            üîó –û–±—Ä–∞–∑—ã: 
               - –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π: ghcr.io/${{ github.repository_owner }}/remnawave-telegram-shop-bot:${{ github.ref_name }}
               - amd64: ghcr.io/${{ github.repository_owner }}/remnawave-telegram-shop-bot:${{ github.ref_name }}-amd64
               - arm64: ghcr.io/${{ github.repository_owner }}/remnawave-telegram-shop-bot:${{ github.ref_name }}-arm64
            üèóÔ∏è –°–æ–±—Ä–∞–Ω–æ: ${{ github.workflow }} #${{ github.run_number }}
            ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${{ github.run_attempt }}